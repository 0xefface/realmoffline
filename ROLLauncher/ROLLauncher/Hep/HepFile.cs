using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Net;
using System.Windows;
using System.Globalization;

namespace ROLLauncher.Hep
{
    /// <summary>
    /// Where all our real work is done.
    /// </summary>
    public class HepFile
    {
        /// <summary>
        /// Loads a hep file into memory
        /// Puls out the server ip and the port
        /// </summary>
        /// <param name="file">The hep file to open</param>
        /// <param name="serverIP">The server IP</param>
        /// <param name="serverPort">Te Server Port</param>
        /// <returns></returns>
        public static byte[] LoadHepFile(string file, out string serverIP, out string serverPort)
        {
            serverIP = string.Empty;
            serverPort = string.Empty;
            byte[] loadHepFile = null;

            try
            {
                loadHepFile = FileToByteArray(file);

                // Ok we start our ip/port config at offset 583 to 610 so 27 chars, which means to overwrite it
                // we need to do as such.
                // 205.123.234.221 = 15 chars and the last 4 chars are the port 7002 so that leaves 8 blank bytes or
                // 205.123.234.221        7002// == 27 bytes or
                // 10.0.0.8              65534// == 27 bytes

                byte[] serverByteInfo = new byte[27];
                Array.Copy(loadHepFile, 583, serverByteInfo, 0, serverByteInfo.Length);
                byte[] port = new byte[5]; // the last 5 bytes are the port
                Array.Copy(serverByteInfo, serverByteInfo.Length - 5, port, 0, port.Length);
                byte[] cleanedPort = CleanBytes(port);

                // First 15 bytes are the ip
                byte[] ip = new byte[15];
                Array.Copy(serverByteInfo, ip, ip.Length);
                byte[] cleanedIP = CleanBytes(ip);

                serverIP = Encoding.ASCII.GetString(cleanedIP);
                serverPort = Encoding.ASCII.GetString(cleanedPort);


            }
            catch (Exception)
            {
                MessageBox.Show("Unable to load Hep file.");
            }
            return loadHepFile;
        }
        /// <summary>
        /// Creates a new hep file server section in byte array
        /// containing the new server ip and port.
        /// </summary>
        /// <param name="server">The new server ip</param>
        /// <param name="port">the new port</param>
        /// <returns>Just the 27 byte length section pertaining to server and port</returns>
        public static byte[] CreateNewHepFile(string server, string port)
        {
            List<byte> builder = new List<byte>();
            // This is the entire file up to the section of server and port
            // no need to tamper with any of this
            byte[] hepBegin = { 0x91, 0x00, 0x92, 0x06, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x12, 0x0C, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x34, 0x12, 0x28, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xC6, 0x01, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x12, 0x11, 0x00, 0x1E, 0x00, 0x40, 0x00, 0x00, 0x00, 0xE2, 0x01, 0x00, 0x00, 0x00, 0x80, 0x9F, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x12, 0x0C, 0x00, 0x42, 0x00, 0x42, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0xAA, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x34, 0x12, 0x1B, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0x90, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x12, 0x39, 0x00, 0x5A, 0x00, 0xCC, 0x00, 0x00, 0x00, 0xE3, 0x01, 0x46, 0x00, 0x00, 0x80, 0xB2, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x05, 0x01, 0x00, 0x34, 0x12, 0x39, 0x00, 0xDE, 0x00, 0xDE, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xE3, 0x01, 0x00, 0x00, 0xBF, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x05, 0x01, 0x00, 0x34, 0x12, 0x23, 0x00, 0xE0, 0x00, 0x26, 0x01, 0x00, 0x00, 0xE4, 0x01, 0x0B, 0x00, 0x00, 0x80, 0x76, 0x06, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x78, 0x69, 0x74, 0x4F, 0x62, 0x6A, 0x00, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x25, 0x64, 0x2E, 0x25, 0x30, 0x33, 0x64, 0x00, 0x55, 0x49, 0x44, 0x2E, 0x44, 0x41, 0x54, 0x00 };
            builder.AddRange(hepBegin);
            // We now have a total of 21 bytes for any ip address or domain name
            // we cannot exceed this at this point
            byte[] serverIP = Encoding.ASCII.GetBytes(server); // ip or hostname

            if (serverIP.Length > 21)
            {
                // We cannot continue
                MessageBox.Show("Length of the host name is too long, use ip address instead!", "Invalid HostName !!");
                return null;
            }
            // We passed being able to fit the info in, it has to be a total of 21 bytes if it isnt already
            if (serverIP.Length < 21)
            {
                // Too small we gotta fix it
                //int current = serverIP.Length;
                //int toAdd = 21 - serverIP.Length;
                Array.Resize(ref serverIP, 21);
            }
            builder.AddRange(serverIP);
            // Add our ending for ip
            builder.Add(0x00);
            byte[] serverPort = Encoding.ASCII.GetBytes(port);
            // Now we move onto port, we have to have max of 5 here no more no less
            if (serverPort.Length > 5)
            {
                // We cannot continue
                MessageBox.Show("Length of the port is too long!!", "Invalid Port !!");
                return null;
            }
            if (serverPort.Length < 5)
            {
                Array.Reverse(serverPort);
                Array.Resize(ref serverPort, 5);
                Array.Reverse(serverPort);
            }
            builder.AddRange(serverPort);
            byte[] hepRemain = { 0x00, 0x2D, 0x44, 0x65, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2E, 0x72, 0x65, 0x61, 0x6C, 0x6D, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x2D, 0x5A, 0x00, 0x3D, 0x00, 0x72, 0x73, 0x00, 0x72, 0x70, 0x00, 0x6C, 0x6E, 0x00, 0x70, 0x77, 0x00, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x00, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6E, 0x66, 0x6F, 0x00, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x00, 0x52, 0x45, 0x53, 0x53, 0x43, 0x49, 0x2E, 0x30, 0x30, 0x30, 0x00, 0x52, 0x45, 0x53, 0x53, 0x43, 0x49, 0x2E, 0x30, 0x31, 0x33, 0x00, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2E, 0x6D, 0x69, 0x64, 0x00, 0x49, 0x6E, 0x66, 0x6F, 0x00, 0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2E, 0x00, 0x4E, 0x45, 0x54, 0x45, 0x52, 0x52, 0x3A, 0x20, 0x43, 0x6F, 0x75, 0x6C, 0x64, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6D, 0x61, 0x6B, 0x65, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x25, 0x73, 0x2E, 0x20, 0x45, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x20, 0x6F, 0x72, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6E, 0x65, 0x74, 0x77, 0x6F, 0x72, 0x6B, 0x2E, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x79, 0x6F, 0x75, 0x72, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x6F, 0x72, 0x20, 0x74, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x31, 0x30, 0x20, 0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73, 0x2E, 0x00, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x25, 0x64, 0x20, 0x25, 0x64, 0x00, 0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2E, 0x00, 0x67, 0x61, 0x6D, 0x65, 0x6C, 0x69, 0x73, 0x74, 0x20, 0x00, 0x4C, 0x6F, 0x67, 0x67, 0x69, 0x6E, 0x67, 0x20, 0x49, 0x6E, 0x00, 0x0A, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6E, 0x67, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x2E, 0x2E, 0x2E, 0x0A, 0x0A, 0x00, 0x54, 0x68, 0x72, 0x65, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6B, 0x65, 0x73, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x79, 0x6F, 0x75, 0x27, 0x72, 0x65, 0x20, 0x6F, 0x75, 0x74, 0x2E, 0x20, 0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x63, 0x61, 0x6C, 0x6C, 0x20, 0x62, 0x61, 0x63, 0x6B, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x72, 0x20, 0x69, 0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x6E, 0x2E, 0x00, 0x4F, 0x6B, 0x00, 0x00, 0x6C, 0x6F, 0x67, 0x69, 0x6E, 0x2E, 0x6C, 0x73, 0x74, 0x00, 0x74, 0x00, 0x66, 0x61, 0x74, 0x61, 0x6C, 0x2E, 0x6C, 0x6F, 0x67, 0x00, 0x55, 0x70, 0x6C, 0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x6C, 0x61, 0x73, 0x74, 0x20, 0x63, 0x72, 0x61, 0x73, 0x68, 0x2E, 0x2E, 0x2E, 0x0A, 0x0A, 0x00, 0x4E, 0x45, 0x54, 0x45, 0x52, 0x52, 0x3A, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x31, 0x34, 0x32, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x31, 0x34, 0x31, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x31, 0x34, 0x30, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x31, 0x30, 0x35, 0x00, 0x4F, 0x75, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x4D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x3A, 0x00, 0x4F, 0x75, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x6D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x00, 0x59, 0x6F, 0x75, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x6C, 0x79, 0x20, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x6C, 0x69, 0x6E, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x70, 0x6C, 0x61, 0x79, 0x20, 0x54, 0x68, 0x65, 0x20, 0x52, 0x65, 0x61, 0x6C, 0x6D, 0x2E, 0x20, 0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x62, 0x65, 0x20, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6E, 0x74, 0x2E, 0x2E, 0x2E, 0x0A, 0x0A, 0x00, 0x47, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x2E, 0x2E, 0x0A, 0x0A, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6C, 0x69, 0x73, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x00, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x00, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x2E, 0x00, 0x25, 0x64, 0x20, 0x6F, 0x66, 0x20, 0x25, 0x64, 0x00, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6D, 0x00, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6D, 0x00, 0x41, 0x72, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x73, 0x75, 0x72, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x77, 0x61, 0x6E, 0x74, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x61, 0x6E, 0x63, 0x65, 0x6C, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x6C, 0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x3F, 0x00, 0x59, 0x65, 0x73, 0x00, 0x4E, 0x6F, 0x00, 0x70, 0x61, 0x74, 0x63, 0x68, 0x25, 0x30, 0x32, 0x64, 0x2E, 0x72, 0x74, 0x70, 0x00, 0x59, 0x6F, 0x75, 0x20, 0x64, 0x6F, 0x6E, 0x27, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x65, 0x6E, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x64, 0x69, 0x73, 0x6B, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2E, 0x20, 0x46, 0x72, 0x65, 0x65, 0x20, 0x75, 0x70, 0x20, 0x73, 0x6F, 0x6D, 0x65, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6E, 0x2E, 
0x00, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x00, 0x20, 0x4F, 0x4B, 0x20, 0x00, 0x43, 0x61, 0x6E, 
0x63, 0x65, 0x6C, 0x00, 0x00, 0x0A, 0x00, 0x30, 0x00, 0x48, 0x00, 0x98, 0x00, 0xBA, 0x00, 0xD2, 0x00, 0x08, 0x01, 0x66, 0x01, 0x7A, 0x01, 0xD8, 0x01, 0xEC, 0x01 };
            builder.AddRange(hepRemain);
            return builder.ToArray();
            /*
            //List<byte> newServer = new List<byte>();
            byte[] toReplace = new byte[27];

            // so now we build our bytes array
            byte[] serverBytes = Encoding.ASCII.GetBytes(server);
            byte[] portBytes = Encoding.ASCII.GetBytes(port);

            // lets go by steps, first the max the ip can be is 15 chars, is it ?
            if (serverBytes.Length != 15)
            {
                // no so fix it.
                // the total needs to be 22 bytes, as the last 5 bytes are our port.
                while (serverBytes.Length != 22)
                {
                    Array.Resize<byte>(ref serverBytes, serverBytes.Length + 1);
                    byte[] blank = { 0 };
                    Array.Copy(blank, 0, serverBytes, serverBytes.Length - 1, blank.Length);
                }
            }
            // Ok do the same for our port, but add it to the end
            if (portBytes.Length != 5)
            {
                while (portBytes.Length != 5)
                {
                    Array.Reverse(portBytes);
                    Array.Resize<byte>(ref portBytes, portBytes.Length + 1);
                    byte[] blank = { 0 };
                    Array.Copy(blank, 0, portBytes, portBytes.Length - 1, blank.Length);
                    Array.Reverse(portBytes);
                }
            }
            Array.Copy(serverBytes, toReplace, serverBytes.Length);
            Array.Copy(portBytes, 0, toReplace, serverBytes.Length, portBytes.Length);
            return toReplace;
             */
        }
        /// <summary>
        /// Cleans up bytes so we dont have a ton
        /// of 00's
        /// </summary>
        /// <param name="toClean">the raw byte array</param>
        /// <returns>Byte Array with no empty bytes.</returns>
        static byte[] CleanBytes(byte[] toClean)
        {
            List<byte> cleanedBytes = new List<byte>();
            foreach (byte b in toClean)
            {
                if (b != 0)
                {
                    cleanedBytes.Add(b);
                }
            }
            return cleanedBytes.ToArray();

        }
        /// <summary>
        /// Opens notepad with the contents of the string, used for debugging
        /// </summary>
        /// <param name="toOutput">The string to write.</param>
        static void OutPutToNotepad(string toOutput)
        {
            using (FileStream fs = new FileStream("tmp.txt", FileMode.Create, FileAccess.ReadWrite))
            {
                fs.Write(Encoding.ASCII.GetBytes(toOutput), 0, toOutput.Length);
            }
            Process.Start("tmp.txt");
        }

        #region File Tools
        /// <summary>
        /// Generates a Default hep file in a byte array
        /// this way we can work with it, and never have to worry
        /// about the end user having to do anything too difficult.
        /// </summary>
        /// <returns>A byte array that can be saved as a file.</returns>
        public static byte[] GenerateDefaultHepFile()
        {
            byte[] hepFile = { 145, 0, 146, 6, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                               52, 18, 12, 0, 10, 0, 10, 0, 0, 0, 255, 255, 4, 0, 0, 0, 36, 2, 0, 0, 255, 255, 255, 255, 52, 18, 40, 0, 
                               16, 0, 16, 0, 0, 0, 255, 255, 198, 1, 0, 0, 147, 2, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 255, 255, 1, 0, 0, 0, 0, 0, 160, 0, 0, 0, 1, 0, 0, 0, 
                               0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 18, 17, 0, 30, 0, 64, 0, 0, 0, 226, 1, 0, 0, 0, 128, 159,
                               2, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 18, 12, 0, 66, 0, 66, 0, 0, 0, 255, 255, 
                               4, 0, 0, 0, 170, 2, 0, 0, 255, 255, 255, 255, 52, 18, 27, 0, 72, 0, 72, 0, 0, 0, 255, 255, 11, 0, 0, 0, 
                               144, 5, 0, 0, 255, 255, 255, 255, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                               0, 0, 0, 0, 0, 0, 0, 0, 52, 18, 57, 0, 90, 0, 204, 0, 0, 0, 227, 1, 70, 0, 0, 128, 178, 5, 0, 0, 255, 255, 
                               255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 128, 0, 128, 0, 
                               0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 254, 0, 254, 
                               0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 158, 5, 1, 0, 52, 18, 57, 0, 222, 
                               0, 222, 0, 0, 0, 255, 255, 227, 1, 0, 0, 191, 5, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 128, 0, 128, 0, 0, 0, 0, 0, 55, 35, 0, 0, 0, 0, 0, 0, 0, 0, 
                               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 254, 0, 254, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                               0, 0, 0, 6, 0, 0, 0, 0, 0, 158, 5, 1, 0, 52, 18, 35, 0, 224, 0, 38, 1, 0, 0, 228, 1, 11, 0, 0, 128, 118, 6, 
                               0, 0, 255, 255, 255, 255, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 120, 105, 116, 79, 98, 106, 0, 86, 
                               101, 114, 115, 105, 111, 110, 58, 32, 37, 100, 46, 37, 48, 51, 100, 0, 85, 73, 68, 46, 68, 65, 84, 0, 49, 
                               50, 55, 46, 48, 46, 48, 46, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 55, 48, 48, 50, 0, 45, 68, 101, 
                               118, 83, 101, 114, 118, 101, 114, 0, 100, 101, 98, 117, 103, 46, 114, 101, 97, 108, 109, 115, 101, 114, 
                               118, 101, 114, 46, 99, 111, 109, 0, 45, 90, 0, 61, 0, 114, 115, 0, 114, 112, 0, 108, 110, 0, 112, 119, 0, 
                               83, 116, 97, 114, 116, 83, 99, 114, 101, 101, 110, 0, 83, 101, 114, 118, 101, 114, 73, 110, 102, 111, 0, 
                               83, 101, 114, 118, 101, 114, 83, 101, 108, 101, 99, 116, 111, 114, 0, 82, 69, 83, 83, 67, 73, 46, 48, 48, 
                               48, 0, 82, 69, 83, 83, 67, 73, 46, 48, 49, 51, 0, 115, 116, 97, 114, 116, 46, 109, 105, 100, 0, 73, 110, 
                               102, 111, 0, 67, 111, 110, 110, 101, 99, 116, 105, 110, 103, 32, 116, 111, 32, 116, 104, 101, 32, 114, 111,
                               117, 116, 105, 110, 103, 32, 115, 101, 114, 118, 101, 114, 46, 0, 78, 69, 84, 69, 82, 82, 58, 32, 67, 111, 
                               117, 108, 100, 32, 110, 111, 116, 32, 109, 97, 107, 101, 32, 99, 111, 110, 110, 101, 99, 116, 105, 111, 
                               110, 32, 119, 105, 116, 104, 32, 37, 115, 46, 32, 69, 105, 116, 104, 101, 114, 32, 116, 104, 101, 32, 115, 
                               101, 114, 118, 101, 114, 32, 105, 115, 32, 100, 111, 119, 110, 32, 111, 114, 32, 121, 111, 117, 32, 97, 
                               114, 101, 32, 110, 111, 116, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 32, 116, 111, 32, 116, 104, 
                               101, 32, 110, 101, 116, 119, 111, 114, 107, 46, 32, 67, 104, 101, 99, 107, 32, 121, 111, 117, 114, 32, 99, 
                               111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 111, 114, 32, 116, 114, 121, 32, 97, 103, 97, 105, 110, 
                               32, 105, 110, 32, 49, 48, 32, 109, 105, 110, 117, 116, 101, 115, 46, 0, 117, 112, 100, 97, 116, 101, 115, 
                               32, 37, 100, 32, 37, 100, 0, 67, 111, 110, 110, 101, 99, 116, 105, 110, 103, 32, 116, 111, 32, 116, 104, 
                               101, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 114, 118, 101, 114, 46, 0, 103, 97, 109, 101, 108, 
                               105, 115, 116, 32, 0, 76, 111, 103, 103, 105, 110, 103, 32, 73, 110, 0, 10, 86, 101, 114, 105, 102, 121, 
                               105, 110, 103, 32, 110, 97, 109, 101, 32, 97, 110, 100, 32, 112, 97, 115, 115, 119, 111, 114, 100, 46, 46,
                               46, 10, 10, 0, 84, 104, 114, 101, 101, 32, 115, 116, 114, 105, 107, 101, 115, 32, 97, 110, 100, 32, 121, 
                               111, 117, 39, 114, 101, 32, 111, 117, 116, 46, 32, 80, 108, 101, 97, 115, 101, 32, 99, 97, 108, 108, 32, 
                               98, 97, 99, 107, 32, 119, 104, 101, 110, 32, 121, 111, 117, 32, 104, 97, 118, 101, 32, 121, 111, 117, 114, 
                               32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 114, 101, 97, 100, 121, 32, 116, 111, 32, 
                               116, 121, 112, 101, 32, 105, 110, 46, 0, 79, 107, 0, 0, 108, 111, 103, 105, 110, 46, 108, 115, 116, 0, 
                               116, 0, 102, 97, 116, 97, 108, 46, 108, 111, 103, 0, 85, 112, 108, 111, 97, 100, 105, 110, 103, 32, 100, 
                               101, 98, 117, 103, 103, 105, 110, 103, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 102, 
                               114, 111, 109, 32, 108, 97, 115, 116, 32, 99, 114, 97, 115, 104, 46, 46, 46, 10, 10, 0, 78, 69, 84, 69, 82,
                               82, 58, 0, 69, 114, 114, 111, 114, 32, 49, 52, 50, 0, 69, 114, 114, 111, 114, 32, 49, 52, 49, 0, 69, 114, 
                               114, 111, 114, 32, 49, 52, 48, 0, 69, 114, 114, 111, 114, 32, 49, 48, 53, 0, 79, 117, 116, 32, 111, 102, 
                               32, 77, 101, 109, 111, 114, 121, 58, 0, 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0, 
                               89, 111, 117, 32, 97, 114, 101, 32, 99, 117, 114, 114, 101, 110, 116, 108, 121, 32, 119, 97, 105, 116, 
                               105, 110, 103, 32, 105, 110, 32, 108, 105, 110, 101, 32, 116, 111, 32, 112, 108, 97, 121, 32, 84, 104, 
                               101, 32, 82, 101, 97, 108, 109, 46, 32, 80, 108, 101, 97, 115, 101, 32, 98, 101, 32, 112, 97, 116, 105, 
                               101, 110, 116, 46, 46, 46, 10, 10, 0, 71, 101, 116, 116, 105, 110, 103, 32, 99, 104, 97, 114, 97, 99, 116, 
                               101, 114, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 46, 46, 46, 10, 10, 0, 69, 114, 114, 
                               111, 114, 32, 101, 115, 116, 97, 98, 108, 105, 115, 104, 105, 110, 103, 32, 99, 111, 110, 110, 101, 99, 
                               116, 105, 111, 110, 46, 0, 99, 111, 110, 110, 101, 99, 116, 83, 99, 114, 105, 112, 116, 0, 87, 97, 105, 
                               116, 105, 110, 103, 46, 46, 46, 0, 37, 100, 32, 111, 102, 32, 37, 100, 0, 80, 114, 111, 103, 114, 101, 
                               115, 115, 73, 116, 101, 109, 0, 112, 114, 111, 103, 114, 101, 115, 115, 73, 116, 101, 109, 0, 65, 114, 
                               101, 32, 121, 111, 117, 32, 115, 117, 114, 101, 32, 121, 111, 117, 32, 119, 97, 110, 116, 32, 116, 111, 
                               32, 99, 97, 110, 99, 101, 108, 32, 112, 97, 116, 99, 104, 32, 100, 111, 119, 110, 108, 111, 97, 100, 105, 
                               110, 103, 63, 0, 89, 101, 115, 0, 78, 111, 0, 112, 97, 116, 99, 104, 37, 48, 50, 100, 46, 114, 116, 112, 
                               0, 89, 111, 117, 32, 100, 111, 110, 39, 116, 32, 104, 97, 118, 101, 32, 101, 110, 111, 117, 103, 104, 32,
                               100, 105, 115, 107, 32, 115, 112, 97, 99, 101, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 116, 104,
                               101, 32, 117, 112, 100, 97, 116, 101, 32, 102, 105, 108, 101, 46, 32, 70, 114, 101, 101, 32, 117, 112, 32,
                               115, 111, 109, 101, 32, 109, 111, 114, 101, 32, 115, 112, 97, 99, 101, 32, 97, 110, 100, 32, 116, 114,
                               121, 32, 97, 103, 97, 105, 110, 46, 0, 71, 101, 116, 80, 97, 116, 99, 104, 83, 99, 114, 105, 112, 116, 0, 
                               32, 79, 75, 32, 0, 67, 97, 110, 99, 101, 108, 0, 0, 10, 0, 48, 0, 72, 0, 152, 0, 186, 0, 210, 0, 8, 1, 102,
                               1, 122, 1, 216, 1, 236, 1 };
            return hepFile;
        }
        public static byte[] HepFileInHex
        {
            get
            {
                return new byte[] { 0x91, 0x00, 0x92, 0x06, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x12, 0x0C, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x34, 0x12, 0x28, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xC6, 0x01, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x12, 0x11, 0x00, 0x1E, 0x00, 0x40, 0x00, 0x00, 0x00, 0xE2, 0x01, 0x00, 0x00, 0x00, 0x80, 0x9F, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x12, 0x0C, 0x00, 0x42, 0x00, 0x42, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0xAA, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x34, 0x12, 0x1B, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0x90, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x12, 0x39, 0x00, 0x5A, 0x00, 0xCC, 0x00, 0x00, 0x00, 0xE3, 0x01, 0x46, 0x00, 0x00, 0x80, 0xB2, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x05, 0x01, 0x00, 0x34, 0x12, 0x39, 0x00, 0xDE, 0x00, 0xDE, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xE3, 0x01, 0x00, 0x00, 0xBF, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x05, 0x01, 0x00, 0x34, 0x12, 0x23, 0x00, 0xE0, 0x00, 0x26, 0x01, 0x00, 0x00, 0xE4, 0x01, 0x0B, 0x00, 0x00, 0x80, 0x76, 0x06, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x78, 0x69, 0x74, 0x4F, 0x62, 0x6A, 0x00, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x25, 0x64, 0x2E, 0x25, 0x30, 0x33, 0x64, 0x00, 0x55, 0x49, 0x44, 0x2E, 0x44, 0x41, 0x54, 0x00, 0x31, 0x32, 0x37, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x30, 0x30, 0x32, 0x00, 0x2D, 0x44, 0x65, 0x76, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x00, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2E, 0x72, 0x65, 0x61, 0x6C, 0x6D, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x2D, 0x5A, 0x00, 0x3D, 0x00, 0x72, 0x73, 0x00, 0x72, 0x70, 0x00, 0x6C, 0x6E, 0x00, 0x70, 0x77, 0x00, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6E, 0x00, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6E, 0x66, 0x6F, 0x00, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x00, 0x52, 0x45, 0x53, 0x53, 0x43, 0x49, 0x2E, 0x30, 0x30, 0x30, 0x00, 0x52, 0x45, 0x53, 0x53, 0x43, 0x49, 0x2E, 0x30, 0x31, 0x33, 0x00, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2E, 0x6D, 0x69, 0x64, 0x00, 0x49, 0x6E, 0x66, 0x6F, 0x00, 0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6F, 0x75, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2E, 0x00, 0x4E, 0x45, 0x54, 0x45, 0x52, 0x52, 0x3A, 0x20, 0x43, 0x6F, 0x75, 0x6C, 0x64, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x6D, 0x61, 0x6B, 0x65, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x25, 0x73, 0x2E, 0x20, 0x45, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x20, 0x6F, 0x72, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6E, 0x65, 0x74, 0x77, 0x6F, 0x72, 0x6B, 0x2E, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6B, 0x20, 0x79, 0x6F, 0x75, 0x72, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x6F, 0x72, 0x20, 0x74, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x31, 0x30, 0x20, 0x6D, 0x69, 0x6E, 0x75, 0x74, 0x65, 0x73, 0x2E, 0x00, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x25, 0x64, 0x20, 0x25, 0x64, 0x00, 0x43, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2E, 0x00, 0x67, 0x61, 0x6D, 0x65, 0x6C, 0x69, 0x73, 0x74, 0x20, 0x00, 0x4C, 0x6F, 0x67, 0x67, 0x69, 0x6E, 0x67, 0x20, 0x49, 0x6E, 0x00, 0x0A, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6E, 0x67, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x2E, 0x2E, 0x2E, 0x0A, 0x0A, 0x00, 0x54, 0x68, 0x72, 0x65, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6B, 0x65, 0x73, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x79, 0x6F, 0x75, 0x27, 0x72, 0x65, 0x20, 0x6F, 0x75, 0x74, 0x2E, 0x20, 0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x63, 0x61, 0x6C, 0x6C, 0x20, 0x62, 0x61, 0x63, 0x6B, 0x20, 0x77, 0x68, 0x65, 0x6E, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x72, 0x20, 0x69, 0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x6E, 0x2E, 0x00, 0x4F, 0x6B, 0x00, 0x00, 0x6C, 0x6F, 0x67, 0x69, 0x6E, 0x2E, 0x6C, 0x73, 0x74, 0x00, 0x74, 0x00, 0x66, 0x61, 0x74, 0x61, 0x6C, 0x2E, 0x6C, 0x6F, 0x67, 0x00, 0x55, 0x70, 0x6C, 0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20, 0x6C, 0x61, 0x73, 0x74, 0x20, 0x63, 0x72, 0x61, 0x73, 0x68, 0x2E, 0x2E, 0x2E, 0x0A, 0x0A, 0x00, 0x4E, 0x45, 0x54, 0x45, 0x52, 0x52, 0x3A, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x31, 0x34, 0x32, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x31, 0x34, 0x31, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x31, 0x34, 0x30, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x31, 0x30, 0x35, 0x00, 0x4F, 0x75, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x4D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x3A, 0x00, 0x4F, 0x75, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x6D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x00, 0x59, 0x6F, 0x75, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x6C, 0x79, 0x20, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x6C, 0x69, 0x6E, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x70, 0x6C, 0x61, 0x79, 0x20, 0x54, 0x68, 0x65, 0x20, 0x52, 0x65, 0x61, 0x6C, 0x6D, 0x2E, 0x20, 0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x20, 0x62, 0x65, 0x20, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6E, 0x74, 0x2E, 0x2E, 0x2E, 0x0A, 0x0A, 0x00, 0x47, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x2E, 0x2E, 0x0A, 0x0A, 0x00, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x20, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6C, 0x69, 0x73, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x00, 0x63, 0x6F, 0x6E, 0x6E, 0x65, 0x63, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x00, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x2E, 0x00, 0x25, 0x64, 0x20, 0x6F, 0x66, 0x20, 0x25, 0x64, 0x00, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6D, 0x00, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6D, 0x00, 0x41, 0x72, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x73, 0x75, 0x72, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x77, 0x61, 0x6E, 0x74, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x61, 0x6E, 0x63, 0x65, 0x6C, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x20, 0x64, 0x6F, 0x77, 0x6E, 0x6C, 0x6F, 0x61, 0x64, 0x69, 0x6E, 0x67, 0x3F, 0x00, 0x59, 0x65, 0x73, 0x00, 0x4E, 0x6F, 0x00, 0x70, 0x61, 0x74, 0x63, 0x68, 0x25, 0x30, 0x32, 0x64, 0x2E, 0x72, 0x74, 0x70, 0x00, 0x59, 0x6F, 0x75, 0x20, 0x64, 0x6F, 0x6E, 0x27, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x65, 0x6E, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x64, 0x69, 0x73, 0x6B, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x2E, 0x20, 0x46, 0x72, 0x65, 0x65, 0x20, 0x75, 0x70, 0x20, 0x73, 0x6F, 0x6D, 0x65, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6E, 0x2E, 0x00, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x00, 0x20, 0x4F, 0x4B, 0x20, 0x00, 0x43, 0x61, 0x6E, 0x63, 0x65, 0x6C, 0x00, 0x00, 0x0A, 0x00, 0x30, 0x00, 0x48, 0x00, 0x98, 0x00, 0xBA, 0x00, 0xD2, 0x00, 0x08, 0x01, 0x66, 0x01, 0x7A, 0x01, 0xD8, 0x01, 0xEC, 0x01 };
            }
        }
        // Load the file into bytes
        /// <summary>
        /// Function to get byte array from a file
        /// </summary>
        /// <param name="_FileName">File name to get byte array</param>
        /// <returns>Byte Array</returns>
        public static byte[] FileToByteArray(string _FileName)
        {
            byte[] _Buffer = null;

            try
            {
                // Open file for reading
                System.IO.FileStream _FileStream = new System.IO.FileStream(_FileName, System.IO.FileMode.Open, System.IO.FileAccess.Read);

                // attach filestream to binary reader
                System.IO.BinaryReader _BinaryReader = new System.IO.BinaryReader(_FileStream);

                // get total byte length of the file
                long _TotalBytes = new System.IO.FileInfo(_FileName).Length;

                // read entire file into buffer
                _Buffer = _BinaryReader.ReadBytes((Int32)_TotalBytes);

                // close file reader
                _FileStream.Close();
                _FileStream.Dispose();
                _BinaryReader.Close();
            }
            catch (Exception _Exception)
            {
                // Error
                MessageBox.Show(_Exception.ToString(), "Exception caught in process!", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            return _Buffer;
        }

        /// <summary>
        /// Function to save byte array to a file
        /// </summary>
        /// <param name="_FileName">File name to save byte array</param>
        /// <param name="_ByteArray">Byte array to save to external file</param>
        /// <returns>Return true if byte array save successfully, if not return false</returns>
        public static bool ByteArrayToFile(string _FileName, byte[] _ByteArray)
        {
            try
            {
                // Open file for reading
                System.IO.FileStream _FileStream = new System.IO.FileStream(_FileName, System.IO.FileMode.Create, System.IO.FileAccess.Write);

                // Writes a block of bytes to this stream using data from a byte array.
                _FileStream.Write(_ByteArray, 0, _ByteArray.Length);

                // close file stream
                _FileStream.Close();

                return true;
            }
            catch (Exception _Exception)
            {
                // Error
                MessageBox.Show(_Exception.ToString(), "Exception caught in process!", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            // error occured, return false
            return false;
        }
        /// <summary>
        /// Take a new 27 byte server/port info we generate above
        /// and inserts it into our default hep file
        /// thereby changing the server and port the file asks for.
        /// </summary>
        /// <param name="newServerInfo"></param>
        /// <returns></returns>
        public static byte[] ReplaceHep(byte[] newServerInfo)
        {
            // get Our Hep
            byte[] hep = GenerateDefaultHepFile();

            // Ok our server info starts at offset 583 and ends at 610 = 27 bytes
            int offset = 583;
            Array.Copy(newServerInfo, 0, hep, offset, 27);
            return hep;
        }
        public static byte[] GetByteArrayFromFile(string fileLocation)
        {
            byte[] reply = new byte[] { 0x10, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x83, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00 };
            string data = string.Empty;
            // If our file is bad return blank charlist
            if (!File.Exists(fileLocation))
            {
                Console.WriteLine("No File at {0}", fileLocation);
                return reply;
            }
            // Try to load the file, if we fail return blank
            try { data = File.ReadAllText(fileLocation); }
            catch (Exception ex) { Console.WriteLine(ex.Message); return reply; }
            //Console.WriteLine(data);
            // Ok is going to be alot of extra comments and crap
            // So we ignore all else, except those with 0x in front, those we convert and add
            List<byte> b = new List<byte>();
            int index = 0;
            while (data.Length != 0)
            {
                if ((index = data.IndexOf("0x")) == 0) { break; }
                // Get the byte folloiwing it
                string singleByte = string.Empty;
                try { singleByte = data.Substring(index, 4); data = data.Remove(0, index + 4); }
                catch { break; } // we are done
                singleByte = singleByte.Remove(0, 2);
                byte convert = Byte.Parse(singleByte, NumberStyles.HexNumber);
                b.Add(convert);
            }
            if (b.Count > 0) { reply = b.ToArray(); }
            return reply;
        }
        #endregion
        #region String Tools
        /// <summary>
        /// Will return true if the ip is dotted, 1.1.1.1 otherwise false.
        /// </summary>
        /// <param name="ip"></param>
        /// <returns></returns>
        public static bool IsInDottedIpFormat(string ip)
        {
            IPAddress address = null;
            // It cant ddo this unless its in dotted ip addres form.
            IPAddress.TryParse(ip, out address);
            if (address != null)
            {
                return true;
            }
            else
                return false;
        }
        /// <summary>
        /// Will return true if the port is within
        /// the valid ranges and is a good port, otherwise returns false.
        /// </summary>
        /// <param name="port"></param>
        /// <returns></returns>
        public static bool IsValidPort(string port)
        {
            int t = 0;
            int.TryParse(port, out t);
            if (t != 0 && t < 65534) // within the valid range
            {
                return true;
            }
            else
                return false;
        }
        #endregion
    }
}
